// <auto-generated />
using System;
using AssetIn.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AssetIn.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250427134615_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("AssetIn.Server.Models.Asset", b =>
                {
                    b.Property<int>("AssetlD")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AssetlD"));

                    b.Property<int>("AssetCatagoryID")
                        .HasColumnType("int");

                    b.Property<string>("AssetIdentificationNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("AssetStatusID")
                        .HasColumnType("int");

                    b.Property<int>("AssetTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("DeletedByOrganization")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("DepreciationRate")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("OrganizationID")
                        .HasColumnType("int");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("AssetlD");

                    b.HasIndex("AssetCatagoryID");

                    b.HasIndex("AssetIdentificationNumber")
                        .IsUnique();

                    b.HasIndex("AssetStatusID");

                    b.HasIndex("AssetTypeID");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("AssetIn.Server.Models.Organization", b =>
                {
                    b.Property<int>("OrganizationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrganizationID"));

                    b.Property<bool>("ActiveOrganization")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OrganizationLogo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("OrganizationID");

                    b.HasIndex("UserID");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("AssetIn.Server.Models.OrganizationsAssetAssignReturn", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AssetID")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("AssignedByUserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AssignedToUserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ReturnedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ID");

                    b.HasIndex("AssetID");

                    b.HasIndex("AssignedByUserID");

                    b.HasIndex("AssignedToUserID");

                    b.ToTable("OrganizationsAssetAssignReturns");
                });

            modelBuilder.Entity("AssetIn.Server.Models.OrganizationsAssetCatagory", b =>
                {
                    b.Property<int>("OrganizationsAssetCatagoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrganizationsAssetCatagoryID"));

                    b.Property<string>("OrganizationsAssetCatagoryName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("OrganizationsID")
                        .HasColumnType("int");

                    b.HasKey("OrganizationsAssetCatagoryID");

                    b.HasIndex("OrganizationsID");

                    b.ToTable("OrganizationsAssetCatagories");
                });

            modelBuilder.Entity("AssetIn.Server.Models.OrganizationsAssetMaintanence", b =>
                {
                    b.Property<int>("OrganizationsAssetMaintanenceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrganizationsAssetMaintanenceID"));

                    b.Property<int>("AssetID")
                        .HasColumnType("int");

                    b.Property<string>("MaintanenceResult")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RetunDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("OrganizationsAssetMaintanenceID");

                    b.HasIndex("AssetID");

                    b.ToTable("OrganizationsAssetMaintanences");
                });

            modelBuilder.Entity("AssetIn.Server.Models.OrganizationsAssetRequest", b =>
                {
                    b.Property<int>("OrganizationsAssetRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrganizationsAssetRequestID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("OrganizationsAssetRequestID");

                    b.HasIndex("UserID");

                    b.ToTable("OrganizationsAssetRequests");
                });

            modelBuilder.Entity("AssetIn.Server.Models.OrganizationsAssetRequestStatus", b =>
                {
                    b.Property<int>("OrganizationsAssetRequestStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrganizationsAssetRequestStatusID"));

                    b.Property<string>("OrganizationsAssetRequestStatusName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("OrganizationsAssetRequestStatusID");

                    b.ToTable("OrganizationsAssetRequestStatuses");

                    b.HasData(
                        new
                        {
                            OrganizationsAssetRequestStatusID = 1,
                            OrganizationsAssetRequestStatusName = "Accepted"
                        },
                        new
                        {
                            OrganizationsAssetRequestStatusID = 2,
                            OrganizationsAssetRequestStatusName = "Pending"
                        },
                        new
                        {
                            OrganizationsAssetRequestStatusID = 3,
                            OrganizationsAssetRequestStatusName = "Declined"
                        },
                        new
                        {
                            OrganizationsAssetRequestStatusID = 4,
                            OrganizationsAssetRequestStatusName = "Fulfilled"
                        },
                        new
                        {
                            OrganizationsAssetRequestStatusID = 5,
                            OrganizationsAssetRequestStatusName = "Canceled"
                        });
                });

            modelBuilder.Entity("AssetIn.Server.Models.OrganizationsAssetRetirement", b =>
                {
                    b.Property<int>("OrganizationsAssetRetirementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrganizationsAssetRetirementID"));

                    b.Property<int>("AssetID")
                        .HasColumnType("int");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RetirementDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RetirementReason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("OrganizationsAssetRetirementID");

                    b.HasIndex("AssetID");

                    b.ToTable("OrganizationsAssetRetirements");
                });

            modelBuilder.Entity("AssetIn.Server.Models.OrganizationsAssetStatus", b =>
                {
                    b.Property<int>("OrganizationsAssetStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrganizationsAssetStatusID"));

                    b.Property<string>("OrganizationsAssetStatusName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("OrganizationsAssetStatusID");

                    b.ToTable("OrganizationsAssetStatuses");

                    b.HasData(
                        new
                        {
                            OrganizationsAssetStatusID = 1,
                            OrganizationsAssetStatusName = "Assigned"
                        },
                        new
                        {
                            OrganizationsAssetStatusID = 2,
                            OrganizationsAssetStatusName = "Retired"
                        },
                        new
                        {
                            OrganizationsAssetStatusID = 3,
                            OrganizationsAssetStatusName = "Under Maintenance"
                        },
                        new
                        {
                            OrganizationsAssetStatusID = 4,
                            OrganizationsAssetStatusName = "Available"
                        },
                        new
                        {
                            OrganizationsAssetStatusID = 5,
                            OrganizationsAssetStatusName = "Lost"
                        },
                        new
                        {
                            OrganizationsAssetStatusID = 6,
                            OrganizationsAssetStatusName = "Out Of Order"
                        });
                });

            modelBuilder.Entity("AssetIn.Server.Models.OrganizationsAssetType", b =>
                {
                    b.Property<int>("OrganizationsAssetTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrganizationsAssetTypeID"));

                    b.Property<string>("OrganizationsAssetTypeName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("OrganizationsID")
                        .HasColumnType("int");

                    b.HasKey("OrganizationsAssetTypeID");

                    b.HasIndex("OrganizationsID");

                    b.ToTable("OrganizationsAssetTypes");
                });

            modelBuilder.Entity("AssetIn.Server.Models.OrganizationsDomain", b =>
                {
                    b.Property<int>("OrganizationsDomainID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrganizationsDomainID"));

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("OrganizationsID")
                        .HasColumnType("int");

                    b.HasKey("OrganizationsDomainID");

                    b.HasIndex("OrganizationsID");

                    b.ToTable("OrganizationsDomains");
                });

            modelBuilder.Entity("AssetIn.Server.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ProfilePicturePath")
                        .HasColumnType("longtext");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("OrganizationId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AssetIn.Server.Models.Vendor", b =>
                {
                    b.Property<int>("VendorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("VendorID"));

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OfficeAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("VendorID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserID");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("AssetIn.Server.Models.VendorProcurementDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("DispachDate")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("GrandTotal")
                        .HasColumnType("float");

                    b.Property<string>("HardlnvoiceImagePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProductCatagory")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("ProductPrice")
                        .HasColumnType("float");

                    b.Property<string>("ProductStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("VendorID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("VendorID");

                    b.ToTable("VendorProcurementDetails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "74f5fb96-7608-4b73-82f3-f7db85c458cd",
                            Name = "OrganizationOwner",
                            NormalizedName = "ORGANIZATIONOWNER"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "c98197cb-f550-4e6c-98c9-7e3bf8193bb7",
                            Name = "OrganizationEmployee",
                            NormalizedName = "ORGANIZATIONEMPLOYEE"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "bb713802-4341-497f-b757-565131b44d1f",
                            Name = "OrganizationAssetManager",
                            NormalizedName = "ORGANIZATIONASSETMANAGER"
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "b3c4036e-e6c8-4a31-ab16-42db2d425a08",
                            Name = "Vendor",
                            NormalizedName = "VENDOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AssetIn.Server.Models.Asset", b =>
                {
                    b.HasOne("AssetIn.Server.Models.OrganizationsAssetCatagory", "OrganizationsAssetCatagory")
                        .WithMany()
                        .HasForeignKey("AssetCatagoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetIn.Server.Models.OrganizationsAssetRequestStatus", "OrganizationsAssetStatus")
                        .WithMany()
                        .HasForeignKey("AssetStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetIn.Server.Models.OrganizationsAssetType", "OrganizationsAssetType")
                        .WithMany()
                        .HasForeignKey("AssetTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetIn.Server.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("OrganizationsAssetCatagory");

                    b.Navigation("OrganizationsAssetStatus");

                    b.Navigation("OrganizationsAssetType");
                });

            modelBuilder.Entity("AssetIn.Server.Models.Organization", b =>
                {
                    b.HasOne("AssetIn.Server.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AssetIn.Server.Models.OrganizationsAssetAssignReturn", b =>
                {
                    b.HasOne("AssetIn.Server.Models.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetIn.Server.Models.User", "AssignedByUser")
                        .WithMany()
                        .HasForeignKey("AssignedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetIn.Server.Models.User", "AssignedToUser")
                        .WithMany()
                        .HasForeignKey("AssignedToUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("AssignedByUser");

                    b.Navigation("AssignedToUser");
                });

            modelBuilder.Entity("AssetIn.Server.Models.OrganizationsAssetCatagory", b =>
                {
                    b.HasOne("AssetIn.Server.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("AssetIn.Server.Models.OrganizationsAssetMaintanence", b =>
                {
                    b.HasOne("AssetIn.Server.Models.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("AssetIn.Server.Models.OrganizationsAssetRequest", b =>
                {
                    b.HasOne("AssetIn.Server.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AssetIn.Server.Models.OrganizationsAssetRetirement", b =>
                {
                    b.HasOne("AssetIn.Server.Models.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("AssetIn.Server.Models.OrganizationsAssetType", b =>
                {
                    b.HasOne("AssetIn.Server.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("AssetIn.Server.Models.OrganizationsDomain", b =>
                {
                    b.HasOne("AssetIn.Server.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("AssetIn.Server.Models.User", b =>
                {
                    b.HasOne("AssetIn.Server.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("AssetIn.Server.Models.Vendor", b =>
                {
                    b.HasOne("AssetIn.Server.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AssetIn.Server.Models.VendorProcurementDetail", b =>
                {
                    b.HasOne("AssetIn.Server.Models.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AssetIn.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AssetIn.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetIn.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AssetIn.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
